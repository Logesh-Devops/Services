**Objective:**

Update a Django-based UI to align with a recently modified FastAPI backend for a "Services" management feature. The goal is to update the forms for creating and updating services to reflect the new data model, ensuring all new fields are present and correctly named.

**Project Context:**

*   **UI Framework:** Django
*   **UI Project Directory:** `/home/lsekar/Pictures/snolep/UI`
*   **Relevant Django App:** The primary logic and templates are located in the `apps/home/` directory.
*   **Key Template Files to Update:**
    *   `apps/templates/home/create_service.html`
    *   `apps/templates/home/update_service.html`
*   **Key View File to Update:**
    *   The corresponding view file (likely `apps/home/views.py`) that handles the logic for these templates will need to be updated to process the new form fields and construct the correct JSON payload for the API.

**Summary of API and Data Model Changes:**

The `Service` and `Subtask` models in the FastAPI backend have been updated. The UI must be modified to match these new fields.

**Old `Service` Model Fields:**
*   `requires_mandatory_docs` (boolean)
*   `recurring_frequency` (enum)
*   `target_date_offset_days` (integer)
*   `auto_assign_user_id` (string)
*   `document_collection_required` (boolean)
*   `gst_return_status_check` (boolean, was a top-level field)

**New `Service` Model Fields:**
*   `is_checklist_completion_required` (boolean)
*   `auto_task_creation_frequency` (enum: "monthly", "quarterly", "half_yearly", "yearly")
*   `target_date_creation_date` (integer)
*   `assign_auto_tasks_to_users_of_respective_clients` (boolean)
*   `assign_auto_tasks_to_users` (list of UUIDs)
*   `create_document_collection_request_automatically` (boolean)
*   `billing.check_gst_return_filing_status_from_gst_server` (boolean, now nested under "billing")

**Old `Subtask` Model Fields:**
*   `due_offset_days`
*   `target_offset_days`
*   `default_assignee_user_id`

**New `Subtask` Model Fields:**
*   `enable_workflow` (boolean)

**Specific Instructions for UI Changes:**

**1. Update `create_service.html` and `update_service.html` Templates:**

Modify the HTML forms in both files to reflect the new data model.

*   **Basic Details Card:**
    *   Find the checkbox with `name="requires_mandatory_docs"`. Change its `name` to `is_checklist_completion_required`. The label is already correct ("Is Checklist Completion Required?").
    *   Find the select dropdown with `name="recurring_frequency"`. Change its `name` to `auto_task_creation_frequency`. The label is already correct ("Auto Task Creation Frequency").
    *   Find the input with `name="target_date_offset_days"`. Change its `name` to `target_date_creation_date`. The label is already correct ("Target Date").
    *   Remove the single user dropdown (`auto_assign_user_id`).
    *   Replace it with a checkbox: `<input class="form-check-input" type="checkbox" id="assign_auto_tasks_to_users_of_respective_clients" name="assign_auto_tasks_to_users_of_respective_clients">` with the label "Assign Auto Tasks to Users of Respective Clients".
    *   Add a multi-select dropdown for user selection with `name="assign_auto_tasks_to_users"` and the label "Assign Auto Tasks to (Users)".
*   **GST API Config Card:**
    *   Find the checkbox with `name="gst_return_status_check"`. Change its `name` to `check_gst_return_filing_status_from_gst_server`. The label is already correct.
*   **Document Collection Request Card:**
    *   Find the checkbox with `name="document_collection_required"`. Change its `name` to `create_document_collection_request_automatically`. The label is already correct.
*   **Subtasks Tab:**
    *   The subtasks tab is currently empty. Implement a dynamic form similar to the "Checklist" tab.
    *   Allow users to "Add Subtask".
    *   Each subtask item should have three fields:
        1.  A text input for `title`.
        2.  A textarea for `description`.
        3.  A checkbox for `enable_workflow`.

**2. Update Django View (e.g., `apps/home/views.py`):**

Modify the view functions that handle the creation and updating of services.

*   **Form Data Processing:**
    *   Update the view to correctly parse all the new and renamed form fields from the `request.POST` object.
*   **API Payload Construction:**
    *   When sending the data to the FastAPI backend, construct the JSON payload according to the new schema.
    *   Ensure that billing-related fields (`sac_code`, `gst_percent`, `default_rate`, `default_billable`, `check_gst_return_filing_status_from_gst_server`) are nested under a `billing` object.
    *   Ensure that checklists, subtasks, and custom fields are sent as lists of objects.

**Final Output:**

Please provide the complete, updated code for the following files:
1.  `apps/templates/home/create_service.html`
2.  `apps/templates/home/update_service.html`
3.  The relevant Django view file (e.g., `apps/home/views.py`) that contains the logic for creating and updating services.
